## The idea of the next function is to create a special matrix object that can cache its inverse
## sample is a matrix object that user will submit on the screen

makeCacheMatrix <- function(sample = matrix()) {
  invsample <- NULL
  set <- function(x) {
    sample <<- x
    invsample <<- NULL
  }
  get <- function() sample
  setInverse <- function(inverse) inv <<- inverse
  getInverse <- function() invsample
  list(set = set,
       get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}


## The next function computes the inverse of the special "matrix" created by makeCacheMatrix (last function) 
## Once the inverse has already been calculated and the 
## matrix has not changed, it should retrieve the inverse from the cache

cacheSolve <- function(sample, ...) {
  ## Return a matrix that is the inverse of 'sample'
  inv <- sample$getInverse()
  if (!is.null(inv)) {
    message("getting cached data")
    return(invsample)
  }
  mat <- sample$get()
  invsample <- solve(mat, ...)
  sample$setInverse(invsample)
  invsample
}
